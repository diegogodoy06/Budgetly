# Generated by Django 5.2.5 on 2025-08-07 19:13

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0003_add_user_profile_fields'),
        ('automation_rules', '0001_initial'),
        ('beneficiaries', '0003_alter_beneficiary_unique_together_and_more'),
        ('categories', '0002_alter_category_workspace_alter_costcenter_workspace_and_more'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='automationrule',
            options={'ordering': ['stage', 'priority', 'name'], 'verbose_name': 'Regra de Automação', 'verbose_name_plural': 'Regras de Automação'},
        ),
        migrations.AddField(
            model_name='automationrule',
            name='is_auto_generated',
            field=models.BooleanField(default=False, verbose_name='Gerada automaticamente'),
        ),
        migrations.AddField(
            model_name='automationrule',
            name='stage',
            field=models.CharField(choices=[('pre', 'Pré-processamento'), ('default', 'Principal'), ('post', 'Pós-processamento')], default='default', max_length=10, verbose_name='Estágio'),
        ),
        migrations.AddField(
            model_name='ruleaction',
            name='account',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.account'),
        ),
        migrations.AddField(
            model_name='ruleaction',
            name='boolean_value',
            field=models.BooleanField(default=False, verbose_name='Valor booleano'),
        ),
        migrations.AddField(
            model_name='ruleaction',
            name='date_value',
            field=models.DateField(blank=True, null=True, verbose_name='Valor data'),
        ),
        migrations.AddField(
            model_name='ruleaction',
            name='numeric_value',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Valor numérico'),
        ),
        migrations.AddField(
            model_name='rulecondition',
            name='account_refs',
            field=models.ManyToManyField(blank=True, to='accounts.account', verbose_name='Contas referenciadas'),
        ),
        migrations.AddField(
            model_name='rulecondition',
            name='beneficiary_refs',
            field=models.ManyToManyField(blank=True, to='beneficiaries.beneficiary', verbose_name='Beneficiários referenciados'),
        ),
        migrations.AddField(
            model_name='rulecondition',
            name='category_refs',
            field=models.ManyToManyField(blank=True, to='categories.category', verbose_name='Categorias referenciadas'),
        ),
        migrations.AddField(
            model_name='rulecondition',
            name='date_value',
            field=models.DateField(blank=True, null=True, verbose_name='Valor data'),
        ),
        migrations.AddField(
            model_name='rulecondition',
            name='date_value_max',
            field=models.DateField(blank=True, null=True, verbose_name='Data máxima'),
        ),
        migrations.AddField(
            model_name='rulecondition',
            name='text_values',
            field=models.JSONField(blank=True, default=list, verbose_name='Múltiplos valores texto'),
        ),
        migrations.AlterField(
            model_name='ruleaction',
            name='action_type',
            field=models.CharField(choices=[('set_category', 'Definir categoria'), ('set_beneficiary', 'Definir beneficiário'), ('set_account', 'Definir conta'), ('set_description', 'Definir descrição'), ('set_amount', 'Definir valor'), ('set_date', 'Definir data'), ('set_notes', 'Definir notas'), ('append_notes', 'Adicionar às notas'), ('prepend_notes', 'Adicionar no início das notas'), ('add_tag', 'Adicionar tag'), ('mark_cleared', 'Marcar como compensado')], max_length=20),
        ),
        migrations.AlterField(
            model_name='rulecondition',
            name='condition_type',
            field=models.CharField(choices=[('description_is', 'Descrição é'), ('description_is_not', 'Descrição não é'), ('description_contains', 'Descrição contém'), ('description_not_contains', 'Descrição não contém'), ('description_matches', 'Descrição regex'), ('description_one_of', 'Descrição é uma de'), ('description_not_one_of', 'Descrição não é uma de'), ('amount_is', 'Valor é'), ('amount_is_not', 'Valor não é'), ('amount_greater', 'Valor maior que'), ('amount_less', 'Valor menor que'), ('amount_range', 'Valor entre'), ('category_is', 'Categoria é'), ('category_is_not', 'Categoria não é'), ('category_one_of', 'Categoria é uma de'), ('category_not_one_of', 'Categoria não é uma de'), ('beneficiary_is', 'Beneficiário é'), ('beneficiary_is_not', 'Beneficiário não é'), ('beneficiary_contains', 'Beneficiário contém'), ('beneficiary_not_contains', 'Beneficiário não contém'), ('beneficiary_one_of', 'Beneficiário é um de'), ('beneficiary_not_one_of', 'Beneficiário não é um de'), ('account_is', 'Conta é'), ('account_is_not', 'Conta não é'), ('account_one_of', 'Conta é uma de'), ('account_not_one_of', 'Conta não é uma de'), ('date_is', 'Data é'), ('date_is_not', 'Data não é'), ('date_after', 'Data após'), ('date_before', 'Data antes'), ('date_range', 'Data entre'), ('transaction_type', 'Tipo de transação')], max_length=30),
        ),
        migrations.CreateModel(
            name='AutomationSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('auto_learning_enabled', models.BooleanField(default=True, verbose_name='Aprendizado automático habilitado')),
                ('auto_create_category_rules', models.BooleanField(default=True, verbose_name='Criar regras de categoria automaticamente')),
                ('auto_create_beneficiary_rules', models.BooleanField(default=True, verbose_name='Criar regras de beneficiário automaticamente')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('disabled_beneficiaries', models.ManyToManyField(blank=True, to='beneficiaries.beneficiary', verbose_name='Beneficiários com aprendizado desabilitado')),
                ('workspace', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='automation_settings', to='accounts.workspace')),
            ],
            options={
                'verbose_name': 'Configurações de Automação',
                'verbose_name_plural': 'Configurações de Automação',
            },
        ),
    ]
